# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'


jobs:
- job: Build

  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.BuildId).zip'
      replaceExistingArchive: true

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: '**/*ComponentTests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'
      workingDirectory: $(Build.SourcesDirectory)

  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
    displayName: Install ReportGenerator tool

  - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
    displayName: Create reports

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

  # - task: PublishSymbols@2
  #   inputs:
  #     SearchPattern: '**/bin/**/*.pdb'
  #     PublishSymbols: false
  #   continueOnError: true

  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #     ArtifactName: '$(Parameters.ArtifactName)'
  #   condition: succeededOrFailed()

- job: Deploy
  dependsOn:
  - Build

  steps:
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Confiz-SPM'
      appType: 'webApp'
      appName: 'adf-poc'
      package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      deploymentMethod: 'auto'
  - task: AzureRmWebAppDeployment@4
    displayName: 'Azure App Service Deploy: adf-poc'
    inputs:
      azureSubscription: 'Confiz-SPM'
      WebAppName: 'adf-poc'
      package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      JSONFiles: '**/appsettings.json'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: '**/*IntegrationTests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator tool'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

  - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
    displayName: 'Create reports'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage from $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'